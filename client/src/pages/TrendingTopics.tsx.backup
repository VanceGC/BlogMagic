import { useAuth } from "@/_core/hooks/useAuth";
import AppNav from "@/components/AppNav";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { trpc } from "@/lib/trpc";
import { useEffect, useState } from "react";
import { useLocation } from "wouter";
import { toast } from "sonner";

export default function TrendingTopics() {
  const { isAuthenticated, loading } = useAuth();
  const [, setLocation] = useLocation();
  const [selectedBlogConfigId, setSelectedBlogConfigId] = useState<number | null>(null);
  const [generatingTopic, setGeneratingTopic] = useState<string | null>(null);

  const { data: blogConfigs } = trpc.blogConfigs.list.useQuery(undefined, {
    enabled: isAuthenticated,
  });

  const { data: trendingTopics, isLoading: loadingTrending, refetch } = trpc.trending.getSuggestions.useQuery(
    { blogConfigId: selectedBlogConfigId! },
    { enabled: selectedBlogConfigId !== null }
  );

  const generatePostMutation = trpc.posts.generate.useMutation({
    onSuccess: () => {
      toast.success("Post generated successfully!");
      setGeneratingTopic(null);
      setLocation("/posts");
    },
    onError: (error) => {
      toast.error(`Failed to generate post: ${error.message}`);
      setGeneratingTopic(null);
    },
  });

  useEffect(() => {
    if (!loading && !isAuthenticated) {
      setLocation("/");
    }
  }, [loading, isAuthenticated, setLocation]);

  useEffect(() => {
    if (blogConfigs && blogConfigs.length > 0 && !selectedBlogConfigId) {
      setSelectedBlogConfigId(blogConfigs[0].id);
    }
  }, [blogConfigs, selectedBlogConfigId]);

  const handleGeneratePost = (topicTitle: string) => {
    if (!selectedBlogConfigId) return;
    setGeneratingTopic(topicTitle);
    generatePostMutation.mutate({
      blogConfigId: selectedBlogConfigId,
      topic: topicTitle,
      generateImage: true,
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p>Loading...</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <AppNav />

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto">
          <div className="mb-8">
            <h1 className="text-3xl font-bold mb-2">üî• Trending Topics</h1>
            <p className="text-gray-600">
              Discover viral content ideas based on current trends in your niche
            </p>
          </div>

          {/* Blog Config Selector */}
          {blogConfigs && blogConfigs.length > 0 && (
            <Card className="mb-6">
              <CardContent className="p-6">
                <label className="block text-sm font-medium mb-2">Select Blog Configuration</label>
                <select
                  value={selectedBlogConfigId || ""}
                  onChange={(e) => setSelectedBlogConfigId(Number(e.target.value))}
                  className="w-full p-2 border rounded-lg"
                >
                  {blogConfigs.map((config) => (
                    <option key={config.id} value={config.id}>
                      {config.siteName}
                    </option>
                  ))}
                </select>
                <Button
                  onClick={() => refetch()}
                  disabled={loadingTrending}
                  className="mt-4"
                  variant="outline"
                >
                  {loadingTrending ? "Discovering Trends..." : "üîÑ Refresh Trending Topics"}
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Trending Topics Grid */}
          {loadingTrending ? (
            <div className="text-center py-12">
              <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mb-4"></div>
              <p className="text-gray-600">Analyzing trending content across platforms...</p>
            </div>
          ) : trendingTopics && trendingTopics.length > 0 ? (
            <div className="grid md:grid-cols-2 gap-6">
              {trendingTopics.map((topic, index) => (
                <Card
                  key={index}
                  className="hover:shadow-lg transition-shadow border-l-4 border-l-purple-500"
                >
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <CardTitle className="text-lg flex-1">{topic.title}</CardTitle>
                      <span
                        className={`text-xs px-3 py-1 rounded-full font-medium ${
                          topic.searchVolume === "high"
                            ? "bg-red-100 text-red-700"
                            : topic.searchVolume === "medium"
                            ? "bg-orange-100 text-orange-700"
                            : "bg-yellow-100 text-yellow-700"
                        }`}
                      >
                        {topic.searchVolume.toUpperCase()}
                      </span>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <p className="text-sm text-gray-700 mb-2">
                          <strong>Why it's trending:</strong>
                        </p>
                        <p className="text-sm text-gray-600">{topic.reason}</p>
                      </div>

                      <div>
                        <p className="text-sm text-gray-700 mb-2">
                          <strong>Source:</strong>
                        </p>
                        <p className="text-sm text-gray-600">{topic.source}</p>
                      </div>

                      <div>
                        <p className="text-sm text-gray-700 mb-2">
                          <strong>Keywords:</strong>
                        </p>
                        <div className="flex flex-wrap gap-2">
                          {topic.keywords.map((keyword, idx) => (
                            <span
                              key={idx}
                              className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded"
                            >
                              {keyword}
                            </span>
                          ))}
                        </div>
                      </div>

                      <Button
                        onClick={() => handleGeneratePost(topic.title)}
                        disabled={generatingTopic !== null}
                        className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700"
                      >
                        {generatingTopic === topic.title ? "Generating..." : "‚ú® Generate Post"}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <Card>
              <CardContent className="p-12 text-center">
                <div className="text-gray-400 mb-4">
                  <svg
                    className="w-16 h-16 mx-auto"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"
                    />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold mb-2">No Trending Topics Found</h3>
                <p className="text-gray-600 mb-4">
                  We couldn't find trending topics for your configuration. Make sure you've added
                  keywords and try refreshing.
                </p>
                <Button onClick={() => refetch()} variant="outline">
                  Try Again
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Info Card */}
          <Card className="mt-8 bg-blue-50 border-blue-200">
            <CardContent className="p-6">
              <h3 className="font-semibold mb-2 flex items-center gap-2">
                <span className="text-blue-600">‚ÑπÔ∏è</span>
                How Trending Topics Work
              </h3>
              <ul className="text-sm text-gray-700 space-y-2">
                <li>
                  ‚Ä¢ We analyze YouTube, Reddit, and competitor content to find what's currently
                  popular
                </li>
                <li>‚Ä¢ Topics are ranked by search volume and engagement potential</li>
                <li>
                  ‚Ä¢ Each suggestion includes trending keywords optimized for SEO and social sharing
                </li>
                <li>‚Ä¢ Click "Generate Post" to create content based on any trending topic</li>
                <li>
                  ‚Ä¢ Trending topics are automatically mixed into your scheduled posts (50% of the
                  time)
                </li>
              </ul>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

